package outboundmailer

// Copyright (c) Park MinKeun and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"net/http"

	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
)

// MailClient is the cloud Outbound Mailer Client
type MailClient struct {
	BaseClient
}

// NewMailClient creates an instance of the MailClient client.
func NewMailClient() MailClient {
	return NewMailClientWithBaseURI(DefaultBaseURI)
}

// NewMailClientWithBaseURI creates an instance of the MailClient client.
func NewMailClientWithBaseURI(baseURI string) MailClient {
	return MailClient{NewWithBaseURI(baseURI)}
}

// Create email 발송을 요청
// Parameters:
// parameter - 메일 발송 요청
func (client MailClient) Create(ctx context.Context, parameter RequestParameter) (result ResponseParameter, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MailClient.Create")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: parameter,
			Constraints: []validation.Constraint{{Target: "parameter.SenderAddress", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "parameter.Title", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "parameter.Body", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "parameter.Recipients", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("outboundmailer.MailClient", "Create", err.Error())
	}

	req, err := client.CreatePreparer(ctx, parameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "outboundmailer.MailClient", "Create", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "outboundmailer.MailClient", "Create", resp, "Failure sending request")
		return
	}

	result, err = client.CreateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "outboundmailer.MailClient", "Create", resp, "Failure responding to request")
	}

	return
}

// CreatePreparer prepares the Create request.
func (client MailClient) CreatePreparer(ctx context.Context, parameter RequestParameter) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/mails"),
		autorest.WithJSON(parameter))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client MailClient) CreateSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client MailClient) CreateResponder(resp *http.Response) (result ResponseParameter, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated, http.StatusBadRequest, http.StatusInternalServerError),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
