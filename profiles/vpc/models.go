// +build go1.9

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was auto-generated by:
// github.com/samjegal/fincloud-sdk-for-go/tools/profileBuilder

package vpc

import original "github.com/samjegal/fincloud-sdk-for-go/services/vpc"

const (
	DefaultBaseURI = original.DefaultBaseURI
)

type NatGatewayInstanceStatusCode = original.NatGatewayInstanceStatusCode

const (
	INIT     NatGatewayInstanceStatusCode = original.INIT
	RUN      NatGatewayInstanceStatusCode = original.RUN
	TERMTING NatGatewayInstanceStatusCode = original.TERMTING
)

type NetworkACLRuleTypeCode = original.NetworkACLRuleTypeCode

const (
	INBND NetworkACLRuleTypeCode = original.INBND
	OTBND NetworkACLRuleTypeCode = original.OTBND
)

type NetworkACLStatusCode = original.NetworkACLStatusCode

const (
	NetworkACLStatusCodeINIT     NetworkACLStatusCode = original.NetworkACLStatusCodeINIT
	NetworkACLStatusCodeRUN      NetworkACLStatusCode = original.NetworkACLStatusCodeRUN
	NetworkACLStatusCodeSET      NetworkACLStatusCode = original.NetworkACLStatusCodeSET
	NetworkACLStatusCodeTERMTING NetworkACLStatusCode = original.NetworkACLStatusCodeTERMTING
)

type PeeringInstanceStatusCode = original.PeeringInstanceStatusCode

const (
	PeeringInstanceStatusCodeINIT     PeeringInstanceStatusCode = original.PeeringInstanceStatusCodeINIT
	PeeringInstanceStatusCodeRUN      PeeringInstanceStatusCode = original.PeeringInstanceStatusCodeRUN
	PeeringInstanceStatusCodeTERMTING PeeringInstanceStatusCode = original.PeeringInstanceStatusCodeTERMTING
)

type ProtocolTypeCode = original.ProtocolTypeCode

const (
	ICMP ProtocolTypeCode = original.ICMP
	TCP  ProtocolTypeCode = original.TCP
	UDP  ProtocolTypeCode = original.UDP
)

type RuleActionCode = original.RuleActionCode

const (
	ALLOW RuleActionCode = original.ALLOW
	DROP  RuleActionCode = original.DROP
)

type SortedBy = original.SortedBy

const (
	SourceVpcName  SortedBy = original.SourceVpcName
	TargetVpcName  SortedBy = original.TargetVpcName
	VpcPeeringName SortedBy = original.VpcPeeringName
)

type SortingOrder = original.SortingOrder

const (
	ASC  SortingOrder = original.ASC
	DESC SortingOrder = original.DESC
)

type StatusCode = original.StatusCode

const (
	StatusCodeCREATING StatusCode = original.StatusCodeCREATING
	StatusCodeINIT     StatusCode = original.StatusCodeINIT
	StatusCodeRUN      StatusCode = original.StatusCodeRUN
	StatusCodeTERMTING StatusCode = original.StatusCodeTERMTING
)

type SubnetStatusCode = original.SubnetStatusCode

const (
	SubnetStatusCodeCREATING SubnetStatusCode = original.SubnetStatusCodeCREATING
	SubnetStatusCodeINIT     SubnetStatusCode = original.SubnetStatusCodeINIT
	SubnetStatusCodeRUN      SubnetStatusCode = original.SubnetStatusCodeRUN
	SubnetStatusCodeTERMTING SubnetStatusCode = original.SubnetStatusCodeTERMTING
)

type SubnetTypeCode = original.SubnetTypeCode

const (
	PRIVATE SubnetTypeCode = original.PRIVATE
	PUBLIC  SubnetTypeCode = original.PUBLIC
)

type SupportedSubnetTypeCode = original.SupportedSubnetTypeCode

const (
	SupportedSubnetTypeCodePRIVATE SupportedSubnetTypeCode = original.SupportedSubnetTypeCodePRIVATE
	SupportedSubnetTypeCodePUBLIC  SupportedSubnetTypeCode = original.SupportedSubnetTypeCodePUBLIC
)

type TargetTypeCode = original.TargetTypeCode

const (
	NATGW      TargetTypeCode = original.NATGW
	VGW        TargetTypeCode = original.VGW
	VPCPEERING TargetTypeCode = original.VPCPEERING
)

type UsageTypeCode = original.UsageTypeCode

const (
	BM    UsageTypeCode = original.BM
	GEN   UsageTypeCode = original.GEN
	LOADB UsageTypeCode = original.LOADB
)

type BaseClient = original.BaseClient
type Client = original.Client
type NatGatewayClient = original.NatGatewayClient
type NetworkACLClient = original.NetworkACLClient
type PeeringClient = original.PeeringClient
type RouteClient = original.RouteClient
type RouteTableClient = original.RouteTableClient
type RouteTableSubnetClient = original.RouteTableSubnetClient
type SubnetClient = original.SubnetClient

func New() BaseClient {
	return original.New()
}
func NewClient() Client {
	return original.NewClient()
}
func NewClientWithBaseURI(baseURI string) Client {
	return original.NewClientWithBaseURI(baseURI)
}
func NewNatGatewayClient() NatGatewayClient {
	return original.NewNatGatewayClient()
}
func NewNatGatewayClientWithBaseURI(baseURI string) NatGatewayClient {
	return original.NewNatGatewayClientWithBaseURI(baseURI)
}
func NewNetworkACLClient() NetworkACLClient {
	return original.NewNetworkACLClient()
}
func NewNetworkACLClientWithBaseURI(baseURI string) NetworkACLClient {
	return original.NewNetworkACLClientWithBaseURI(baseURI)
}
func NewPeeringClient() PeeringClient {
	return original.NewPeeringClient()
}
func NewPeeringClientWithBaseURI(baseURI string) PeeringClient {
	return original.NewPeeringClientWithBaseURI(baseURI)
}
func NewRouteClient() RouteClient {
	return original.NewRouteClient()
}
func NewRouteClientWithBaseURI(baseURI string) RouteClient {
	return original.NewRouteClientWithBaseURI(baseURI)
}
func NewRouteTableClient() RouteTableClient {
	return original.NewRouteTableClient()
}
func NewRouteTableClientWithBaseURI(baseURI string) RouteTableClient {
	return original.NewRouteTableClientWithBaseURI(baseURI)
}
func NewRouteTableSubnetClient() RouteTableSubnetClient {
	return original.NewRouteTableSubnetClient()
}
func NewRouteTableSubnetClientWithBaseURI(baseURI string) RouteTableSubnetClient {
	return original.NewRouteTableSubnetClientWithBaseURI(baseURI)
}
func NewSubnetClient() SubnetClient {
	return original.NewSubnetClient()
}
func NewSubnetClientWithBaseURI(baseURI string) SubnetClient {
	return original.NewSubnetClientWithBaseURI(baseURI)
}
func NewWithBaseURI(baseURI string) BaseClient {
	return original.NewWithBaseURI(baseURI)
}
func PossibleNatGatewayInstanceStatusCodeValues() []NatGatewayInstanceStatusCode {
	return original.PossibleNatGatewayInstanceStatusCodeValues()
}
func PossibleNetworkACLRuleTypeCodeValues() []NetworkACLRuleTypeCode {
	return original.PossibleNetworkACLRuleTypeCodeValues()
}
func PossibleNetworkACLStatusCodeValues() []NetworkACLStatusCode {
	return original.PossibleNetworkACLStatusCodeValues()
}
func PossiblePeeringInstanceStatusCodeValues() []PeeringInstanceStatusCode {
	return original.PossiblePeeringInstanceStatusCodeValues()
}
func PossibleProtocolTypeCodeValues() []ProtocolTypeCode {
	return original.PossibleProtocolTypeCodeValues()
}
func PossibleRuleActionCodeValues() []RuleActionCode {
	return original.PossibleRuleActionCodeValues()
}
func PossibleSortedByValues() []SortedBy {
	return original.PossibleSortedByValues()
}
func PossibleSortingOrderValues() []SortingOrder {
	return original.PossibleSortingOrderValues()
}
func PossibleStatusCodeValues() []StatusCode {
	return original.PossibleStatusCodeValues()
}
func PossibleSubnetStatusCodeValues() []SubnetStatusCode {
	return original.PossibleSubnetStatusCodeValues()
}
func PossibleSubnetTypeCodeValues() []SubnetTypeCode {
	return original.PossibleSubnetTypeCodeValues()
}
func PossibleSupportedSubnetTypeCodeValues() []SupportedSubnetTypeCode {
	return original.PossibleSupportedSubnetTypeCodeValues()
}
func PossibleTargetTypeCodeValues() []TargetTypeCode {
	return original.PossibleTargetTypeCodeValues()
}
func PossibleUsageTypeCodeValues() []UsageTypeCode {
	return original.PossibleUsageTypeCodeValues()
}
func UserAgent() string {
	return original.UserAgent() + " profiles/latest"
}
func Version() string {
	return original.Version()
}
